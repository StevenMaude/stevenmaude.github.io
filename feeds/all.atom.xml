<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>stevenmaude.co.uk</title><link href="https://www.stevenmaude.co.uk/" rel="alternate"></link><link href="https://www.stevenmaude.co.uk/feeds/all.atom.xml" rel="self"></link><id>https://www.stevenmaude.co.uk/</id><updated>2019-12-16T22:41:00+00:00</updated><entry><title>Learning from other projects: pelican-themes</title><link href="https://www.stevenmaude.co.uk/posts/learning-from-other-projects-pelican-themes" rel="alternate"></link><published>2019-12-16T22:41:00+00:00</published><updated>2019-12-16T22:41:00+00:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2019-12-16:/posts/learning-from-other-projects-pelican-themes</id><summary type="html">&lt;p&gt;Taking a look at pelican-themes — a project I currently use — to learn from it.&lt;/p&gt;</summary><content type="html">&lt;h2 id="lack-of-updates"&gt;Lack of updates&lt;/h2&gt;
&lt;p&gt;At the time of writing, this blog uses Pelican to convert the Markdown
blog content into publishable HTML. And, if you noticed from the dates
on my posts, there has been just over a year between the last post and
this one. This was mainly because there was considerable work needed to
get this blog setup up-to-date: both in upgrading Pelican to the latest
version, and pulling in updates to the theme.&lt;/p&gt;
&lt;p&gt;Updating the theme was made slightly more complicated by the migration
of the theme from its &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;original
repository&lt;/a&gt;. The new
home became the
&lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt;
repository, not as a submodule but as the definitive repository for that
theme.&lt;/p&gt;
&lt;p&gt;In the past, it was simpler for me to simply pull request changes from
the parent of my theme's fork directly into my fork. Instead, I had to
restructure my repository slightly and start to &lt;code&gt;git cherry-pick&lt;/code&gt;
individual commits that were applied to the theme within the repository.&lt;/p&gt;
&lt;p&gt;Anyway, I've caught up on the maintenance. Bootstrap 3 is now
&lt;a href="https://blog.getbootstrap.com/2019/07/24/lts-plan/"&gt;end-of-life&lt;/a&gt; so
there is a longer term issue of this theme still being stuck on it. If I
end up migrating to a new theme, it might be worth investigating using
&lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; instead of Pelican at the same time. Hugo has
increased in popularity considerably since I started using Pelican.&lt;/p&gt;
&lt;h2 id="learning-from-other-projects"&gt;Learning from other projects&lt;/h2&gt;
&lt;p&gt;While spending a fair amount of time updating my theme and working with
the pelican-themes repository, I had chance to think about how the
pelican-themes repository is structured and lessons I've learned just
from having to work with it.&lt;/p&gt;
&lt;p&gt;Reading and understanding — or at least attempting to understand —
other people's source code is a way of picking up new ideas or concepts.
What might also be useful for learning is looking at projects you use as
a whole. How are they organised? How does that makes them easy or
difficult to work with?&lt;/p&gt;
&lt;p&gt;There is a caveat that even a public source code repository doesn't
necessarily yield all the decision making that went on to get it to such
a state. Some of that process may indeed be located with the source
repository, e.g. pull request comment threads or issues. Some of that
process may be separate to the source repository, but still public, e.g.
public mailing lists. Some of that process may be entirely private, e.g.
emails or private working documents. Some of it may be undocumented at
all and reside entirely within maintainers' heads.&lt;/p&gt;
&lt;h2 id="pelican-themes"&gt;pelican-themes&lt;/h2&gt;
&lt;h3 id="a-note"&gt;A note&lt;/h3&gt;
&lt;p&gt;The tone of this post shouldn't be considered as a ranting "why, oh why,
is this project not doing things the way I suggest?" post, but primarily
an exercise to just consider and note other ways it could have been
structured.&lt;/p&gt;
&lt;p&gt;It's an actively maintained project, and the maintainers are
volunteering considerable amounts of their own time doing just that.&lt;/p&gt;
&lt;p&gt;In many projects, whether by a single developer or a team, whether
commercial and proprietary or open source, it's also entirely believable
that there's no long-term maintenance plan from the outset. At the
start, it's not even known whether the project will have a long-term
future. The first commit of pelican-themes was in February 2011, making
it nine years old in 2020. Often, things do just get worked out along
the way.&lt;/p&gt;
&lt;h3 id="the-current-state"&gt;The current state&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-themes/"&gt;pelican-themes&lt;/a&gt; is a
mixture of submodules and themes whose files exist entirely in the
repository. The included non-submodule themes sometimes (if not often or
even always) use the pelican-themes repository as their definitive home.
There are a few problems I've seen with this approach, exemplified by
the theme I am currently using my &lt;a href="https://github.com/StevenMaude/pelican-bootstrap3-sm"&gt;own
fork&lt;/a&gt; of,
pelican-bootstrap3.&lt;/p&gt;
&lt;p&gt;Back when pelican-bootstrap3 was still maintained by its original
developer, there were actually changes made to the version in
&lt;a href="https://github.com/getpelican/pelican-themes/commit/c817f12a9f5034a05abec4d2515adabd003f9ac0#diff-32c97fb49ece91afc9f43c8405423109"&gt;pelican-themes&lt;/a&gt;
that diverged from pelican-bootstrap3. pelican-bootstrap3 within
&lt;a href="https://github.com/getpelican/pelican-themes/commit/faa85d6112a759767a4f327e35a07fa55d9e747e#diff-0eb6cb930365747af1fe070650593b8e"&gt;pelican-themes&lt;/a&gt;
was then updated by simply a straight copy over of the then-current
version of the upstream theme, losing the changes made to the
pelican-themes version. Apart from losing work, this process can be
potentially confusing for users not directly following the development
process; you can have something that was fixed, then &lt;em&gt;unfixed&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Later, the official home of pelican-bootstrap3 became the pelican-themes
repository as the original developer &lt;a href="https://github.com/getpelican/pelican-themes/pull/383"&gt;no longer wanted to support
it&lt;/a&gt;. This had a
couple of consequences.&lt;/p&gt;
&lt;p&gt;First, it meant that the pelican-themes maintainers adopted the extra
maintenance work of a popular theme. Those maintainers may not even
&lt;em&gt;use&lt;/em&gt; the theme. This means that pull requests can languish, perhaps
because the maintainers don't feel that comfortable merging substantial
changes or don't have strong opinions on whether the proposed changes
are worthwhile. For pelican-bootstrap3, at the time of writing in
December 2019, there are several unmerged pull requests on
pelican-themes right now, even as &lt;a href="https://github.com/getpelican/pelican-themes/pull/414"&gt;far back as
2016&lt;/a&gt;.  Pull
requests left unloved and unmerged are a deterrent to other developers
who may be considering contributing other changes.&lt;/p&gt;
&lt;p&gt;Second, even if pull requests are regularly merged, there may be less of
a definitive direction taken than if maintainers have strong opinions
about where that subproject is headed. It can also lead to a lack of
quality assurance. For pelican-bootstrap3, an example is this
&lt;a href="https://github.com/getpelican/pelican-themes/pull/441"&gt;translation
feature&lt;/a&gt;. Such a
feature is one that's useful to lots of people, but unfortunately it
&lt;a href="https://github.com/getpelican/pelican-themes/issues/460"&gt;broke things&lt;/a&gt;
for users who didn't have the same plugin configuration as the original
author, affecting those users who did not intend to use the new feature.&lt;/p&gt;
&lt;h3 id="how-else-might-pelican-themes-be-managed"&gt;How else might pelican-themes be managed?&lt;/h3&gt;
&lt;p&gt;That's how things are structured in pelican-themes now. I did think
about other ways the repository might have been structured taking the
above features of how it works right now into account.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pelican-themes could simply have been a list of links to themes,
  solely a reference resource.&lt;/p&gt;
&lt;p&gt;The advantage of this is no management on the part of the
pelican-themes maintainers is required except to add new themes or
remove themes that are no longer supported or unavailable. In many
cases, once a theme is added, that would be as much as is ever
required to be done for that theme. The big disadvantage is that you
can't just clone the entire repository and have all the themes ready
to use. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There could be a "more strongly" monorepo version of what there is
  now, that is, pelican-themes could be a pure monorepo with no
  submodules.  This now means that &lt;em&gt;every theme&lt;/em&gt; has to be
  hand-maintained by copying from the upstream version repository, if
  pelican-themes isn't the original repository for a theme. This
  doesn't, however, solve the problem of having a mixture of maintained
  and unmaintained themes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Going completely in the opposite direction is an option too: have
  every theme in pelican-themes included as a submodule. This has the
  advantage that pull requests into pelican-themes would be simple,
  simply reflecting a submodule update to the parent repository's
  current release.&lt;/p&gt;
&lt;p&gt;It would mean that every theme in pelican-themes where
pelican-themes is the definitive repository for that theme would
need to be moved to its own individual repository. However, breaking
out the themes in this way might make it easier for those themes to
be managed by specific maintainers for each theme only (provided
volunteers could be found), as opposed to the current agglomerate
repository maintained by developers who may not use most of the
themes present.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, the problems described above are easy to spot when using a
project that's been around a while, but perhaps subtle at a project's
inception. I think this is symptomatic of software development. It is
possible to build something that takes on a direction beyond that
originally envisaged, especially projects that have many contributors or
maintainers over time, each of which may have their own opinions as to
how such a project should be nurtured.&lt;/p&gt;</content><category term="2019"></category><category term="git"></category><category term="project management"></category></entry><entry><title>Stopping Fujitsu's Battery Charging Control Update Tool from crashing Windows 10</title><link href="https://www.stevenmaude.co.uk/posts/stopping-fujitsus-battery-charging-control-update-tool-from-crashing-windows-10" rel="alternate"></link><published>2018-12-10T21:16:00+00:00</published><updated>2018-12-10T21:16:00+00:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2018-12-10:/posts/stopping-fujitsus-battery-charging-control-update-tool-from-crashing-windows-10</id><summary type="html">&lt;p&gt;Preventing Fujitsu's Battery Charging Control Update from
making Windows 10 crash with a blue screen error caused by
tdklib64.sys.&lt;/p&gt;</summary><content type="html">&lt;p&gt;(NB: There's some background here just by way of introduction. If you encounter
this problem and don't want to endure my waffling, check the setting I &lt;a href="#the-fix"&gt;mention
below&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;My Fujitsu laptop currently dual boots Windows and Ubuntu, but it's rare that I
boot into Windows. Nonetheless, I had a little time spare last week, I figured
I might as well catch up on things everywhere and update the Windows install.&lt;/p&gt;
&lt;p&gt;Dropping into that did update Windows, and all well and good. Or so I thought.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The problem&lt;/h2&gt;
&lt;p&gt;On restarting, I noticed there was a Fujitsu prompt that appeared, and was a
little unexpected. What I was being asked to install was the very precisely
named "Battery Charging Control Update Tool". It seems &lt;a href="https://www.fujitsu.com/global/about/resources/news/notices/2018/1031-01.html"&gt;Fujitsu have had some
issues with battery
quality&lt;/a&gt;,
leading to a potential fire risk; this tool is supposed to mitigate that.&lt;/p&gt;
&lt;p&gt;It seems that, at least for my model of laptop, the tool was attempting to
update the BIOS. And you can see how the &lt;a href="https://www.fujitsu.com/hk/support/products/computing/pc/ap/announcements/battery-control-update-tool.html"&gt;tool &lt;em&gt;should&lt;/em&gt; work on Fujitsu's Hong
Kong site&lt;/a&gt;
(and that page I could only find on the Hong Kong site for some reason).&lt;/p&gt;
&lt;p&gt;In the previous paragraph, I say &lt;em&gt;attempting&lt;/em&gt; to update the BIOS, because what
happened, after the initial preparation stage occurred with the "Continue to
update BIOS?" prompt, was that shortly after I clicked "Yes", I saw a lovely
Windows 10 blue screen which I think mentioned tdklib64.sys as the cause.&lt;/p&gt;
&lt;p&gt;There's nothing I could find relating to this failed BIOS update and these blue
screens — although there were mentions of BIOS update failures and tdklib64.sys
relating to other manufacturers machines. Finding nothing struck me as strange:
it's a fair bet that you'll find at least one person's already complained
loudly somewhere about a problem you've encountered too. &lt;/p&gt;
&lt;p&gt;Anyway, I rebooted and tried the update again. Same result. Blue screen.&lt;/p&gt;
&lt;p&gt;OK then. Third time lucky, maybe? No. Just the same (reliably) unreliable
result.&lt;/p&gt;
&lt;h2 id="the-fix"&gt;The fix&lt;/h2&gt;
&lt;p&gt;In a moment of fortunate (and rare) inspiration, I remembered that I'd turned on a
relatively new security feature — &lt;a href="https://support.microsoft.com/en-us/help/4096339/windows-10-device-protection-in-windows-defender-security-center"&gt;Memory
Integrity&lt;/a&gt;
— in Windows Defender Security Center as I'd spotted it as a setting I'd not
enabled already. Perhaps that was the culprit, especially as no-one else seemed
to have encounter this failure yet?&lt;/p&gt;
&lt;p&gt;Yes. Yes, it was.&lt;/p&gt;
&lt;p&gt;Disabling that again meant the update proceeded without a problem, and then I
just re-enabled the Memory Integrity setting once again after the BIOS update
completed. If you're having a similar problem, check this setting before
attempting to update. Maybe this tip helps you avoid the hour I spent figuring
this out.&lt;/p&gt;</content><category term="2018"></category><category term="fix"></category><category term="Windows"></category></entry><entry><title>git: nice and lease-y</title><link href="https://www.stevenmaude.co.uk/posts/git-nice-and-lease-y" rel="alternate"></link><published>2018-11-10T13:23:00+00:00</published><updated>2018-11-10T13:23:00+00:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2018-11-10:/posts/git-nice-and-lease-y</id><summary type="html">&lt;p&gt;Why generally using &lt;code&gt;git push --force-with-lease&lt;/code&gt; over &lt;code&gt;git push --force&lt;/code&gt; seems sensible.&lt;/p&gt;</summary><content type="html">&lt;h2 id="can-you-feel-the-force"&gt;Can you feel the &lt;code&gt;--force&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;Force pushing to a remote repository that others may be using should
always be done with care. Even if it's a completely private repository
that only you use, you maybe should double check your thinking before
going ahead.&lt;/p&gt;
&lt;p&gt;The double edged sword of a force push is that you're changing the state
of the remote repository history irrevocably.&lt;/p&gt;
&lt;p&gt;This can be good, for instance, if you're working on a non-master
repository branch that you "own" and have perhaps cleaned it up:
rebasing it, removing or squashing unneeded separate commits.&lt;/p&gt;
&lt;p&gt;It can be bad if you force push to master on a repository, and cause, at
minimum, considerable inconvenience for other developers. Those
developesr may now face working out what exactly has happened to the
repository, when they try and integrate their future changes, or may be
baffled that a previously existing commit has now mysteriously
disappeared.&lt;/p&gt;
&lt;p&gt;If you're working on a non-master development branch, you may be a
little bit more lax in how you force push. Certainly, the way I've used
branches with other people is that generally a branch is owned by one
particular person, and those are free to be amended by that branch owner
(usually the creator of that branch, although ownership may be passed
from person to person). Then, as the agreed owner of such a branch,
provided I know that I'm happy with the local changes, I can just force
push to that development branch.&lt;/p&gt;
&lt;p&gt;However, that's not always the case. Perhaps two people are working on
the same branch, maybe working on slightly different things, e.g. one
could be working on frontend changes for the site, while another works
on backend changes, but these changes are part of the same feature, and
therefore need to be part of the same branch. &lt;/p&gt;
&lt;h2 id="what-force-with-lease-offers-over-vanilla-force"&gt;What &lt;code&gt;--force-with-lease&lt;/code&gt; offers over vanilla &lt;code&gt;--force&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;What I discovered recently, although it's been around for ages, is that
git has another option for forcing push: &lt;code&gt;--force-with-lease&lt;/code&gt;. What this
option does is checks that the remote branch is still in the same state
it was when you last pulled it, and refuses to force push if not, i.e.
there have been no other changes to the branch in the intervening time.&lt;/p&gt;
&lt;p&gt;Of course, you can always still override this check by just using plain
old &lt;code&gt;--force&lt;/code&gt;. But &lt;code&gt;--force-with-lease&lt;/code&gt; at least gives you another
safety check before force pushing, just in case someone else has altered
the remote branch (giving you chance, for example, to pull that branch,
and rebase your changes on it), and avoiding any confusion between
developers, and potentially loss of work.&lt;/p&gt;
&lt;p&gt;Note though, &lt;a href="https://stackoverflow.com/a/43726130"&gt;as this answer
highlights&lt;/a&gt;, if you have an editor
or other scheduled task running &lt;code&gt;git fetch&lt;/code&gt; in the background,
&lt;code&gt;--force-with-lease&lt;/code&gt; won't offer any protection as the remote tracking
branches that would be stored locally are being periodically updated.&lt;/p&gt;</content><category term="2018"></category><category term="git"></category></entry><entry><title>A look at Pipenv</title><link href="https://www.stevenmaude.co.uk/posts/a-look-at-pipenv" rel="alternate"></link><published>2018-08-26T14:06:00+01:00</published><updated>2018-08-26T14:06:00+01:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2018-08-26:/posts/a-look-at-pipenv</id><summary type="html">&lt;p&gt;A quick look at Pipenv, a tool to manage Python packages.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/pypa/pipenv"&gt;Pipenv&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; is a tool that aims to
remove the hassle of using
&lt;a href="https://www.stevenmaude.co.uk/posts/explaining-python-virtualenv-in-under"&gt;virtualenvs&lt;/a&gt;
(Python runtime environments to keep separate Python setups for
different projects independent), and also help manage requirements. It
also aims to help provide deterministic builds of software.&lt;/p&gt;
&lt;p&gt;I had read about Pipenv previously, but couldn't ever really understand
how it worked from just reading about it. So I switched from my existing
virtualenv setup to this to try it out and figure out whether I can
replicate the same behaviour I had with virtualenv and
virtualenvwrapper.&lt;/p&gt;
&lt;h2 id="differences"&gt;Differences&lt;/h2&gt;
&lt;p&gt;The main difference of Pipenv to the way you might work with virtualenvs
— which, for me, is switch to a particular virtualenv for a project, then
run commands in the shell as normal, just with a self-contained Python
setup — is that Pipenv is more contextual.&lt;/p&gt;
&lt;p&gt;With Pipenv, you change to the appropriate project directory and then
run commands directly in that virtualenv by preceding them with &lt;code&gt;pipenv
run&lt;/code&gt;, e.g. &lt;code&gt;pipenv run myscript.py&lt;/code&gt;. Pipenv knows which virtualenv to
use based on the location you're in.&lt;/p&gt;
&lt;p&gt;(You can also get more virtualenv-like behaviour by going to a project
directory and doing &lt;code&gt;pipenv shell&lt;/code&gt; where it effectively activates the
virtualenv in the shell. However, one downside with this is that the
subshell command history there only exists within that subshell; it is
not stored in your main shell.)&lt;/p&gt;
&lt;p&gt;Another difference is that you would also tend to favour using &lt;code&gt;pipenv&lt;/code&gt;
over &lt;code&gt;pip&lt;/code&gt; for installing packages; &lt;code&gt;pipenv install &amp;lt;SOME_PACKAGE&amp;gt;&lt;/code&gt; also
adds packages to your project's
&lt;a href="https://github.com/pypa/pipfile"&gt;&lt;code&gt;Pipfile&lt;/code&gt;&lt;/a&gt;, which replaces the older
&lt;code&gt;requirements.txt&lt;/code&gt; file of specifying dependencies.&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;You can create a new Pipenv either implicitly by &lt;code&gt;pipenv install --dev&lt;/code&gt;
which installs dependencies for that project (including dev
dependencies) in a new virtualenv it creates, or more explicitly by:
&lt;code&gt;pipenv --two&lt;/code&gt; or &lt;code&gt;pipenv --three&lt;/code&gt; which gets you a new virtualenv with
that version of Python.&lt;/p&gt;
&lt;p&gt;You can also use &lt;code&gt;--python &amp;lt;VERSION_NUMBER&amp;gt;&lt;/code&gt; to use a specific point
release of Python of your choice you have installed, e.g. 3.7.
Furthermore, if you have pyenv installed, it will install the requested
version of Python for you, if that version is not installed already.&lt;/p&gt;
&lt;p&gt;There are two broad uses of virtualenvs I had:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;for Python development to avoid any clash of package versions, which
   is covered quite well by the default behaviour of Pipenv.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for running standalone Python software I want to run, e.g.
   Docker Compose, but keeping their installations entirely independent
   of each other to avoid any conflicts. This isn't quite covered as
   well, because &lt;code&gt;pipenv run&lt;/code&gt; requires you to be in the directory or a
   subdirectory of that directory&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; where you've already run Pipenv
   and a Pipfile exists, as that's how I assume it figures out which
   virtualenv to use. Otherwise, running Pipenv creates a new
   virtualenv! I think &lt;code&gt;pipenv shell&lt;/code&gt; works around this dropping you
   into a new subshell where the virtualenv is activated.&lt;/p&gt;
&lt;p&gt;Alternatively, in bash, you can do &lt;code&gt;source $(pipenv
--venv)/bin/activate&lt;/code&gt; in the directory with the virtualenv, to work
at a slightly lower level, with the virtualenv directly, without
&lt;code&gt;pipenv shell&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These use cases are both handled reasonably well by Pipenv.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Pipenv seems to work well enough if you want to simplify using
virtualenvs and management of dependencies. I think there are two groups
of users that it might particularly suit: those who are newer to
managing Python packaging and virtualenvs — as a means of abstracting
away virtualenv management — and those who are more experienced but want
to have a tool that integrates other features, e.g. checking for
dependency vulnerabilities via &lt;code&gt;pipenv check&lt;/code&gt; (which is provided by the
&lt;a href="https://github.com/pyupio/safety"&gt;safety&lt;/a&gt; package).&lt;/p&gt;
&lt;p&gt;However, if you read around, there is still some contention about Pipenv
being &lt;a href="https://packaging.python.org/guides/tool-recommendations/"&gt;recommended by the
PyPA&lt;/a&gt;.
Certainly, there are a considerable number of small issues that remove
some of Pipenv's sheen; &lt;a href="https://github.com/pypa/pipenv/issues/2753"&gt;I encountered a small one already
reported&lt;/a&gt; within just a
short time of using Pipenv. There are also several issues relating to
dependency resolution, which seem a little more critical seeing as
dependency management is one of the tool's core goals.&lt;/p&gt;
&lt;p&gt;Pipenv then is no panacea for Python's still byzantine dependency
management. &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;PEP 20&lt;/a&gt;'s call
for "one obvious way to do it" is not yet fully heeded. But maybe it's a
step roughly in the right direction, even if there's still some
meandering to do before there's a really simple and transparent workflow
for Python. (However, I don't think it's uncommon for dependency
management being tricky to get right either; Go has been around for a
decade and is only just &lt;a href="https://blog.golang.org/versioning-proposal"&gt;getting
there&lt;/a&gt;. Python's had
considerably longer than Go to get it right though.)&lt;/p&gt;
&lt;p&gt;Finally, it is worth noting that there are other alternatives too.
&lt;a href="https://github.com/sdispater/poetry"&gt;Poetry&lt;/a&gt; is a newer, and perhaps
less well known, tool whose goals intersect with those of Pipenv. It
fixes some of the existing issues of dependency resolution that
pip-tools has (pip-tools is the underlying package that pipenv actually
uses for this task), and therefore may be another useful contender to
keep in mind.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Confusingly, Pipenv's name is capitalised, while pip's is not.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Caveat: it only looks a certain number of subdirectories deep by
default, though &lt;a href="https://github.com/pypa/pipenv/issues/1634"&gt;this number is configurable&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="2018"></category><category term="Pipenv"></category><category term="Python"></category></entry><entry><title>Solve your problem with sloppy Python</title><link href="https://www.stevenmaude.co.uk/posts/solve-your-problem-with-sloppy-python" rel="alternate"></link><published>2018-05-20T17:24:00+01:00</published><updated>2018-05-20T17:24:00+01:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2018-05-20:/posts/solve-your-problem-with-sloppy-python</id><summary type="html">&lt;p&gt;A summary of a talk by Larry Hastings at PyCon 2018.&lt;/p&gt;</summary><content type="html">&lt;h2 id="pycon-2018-a-quick-note"&gt;PyCon 2018: A quick note&lt;/h2&gt;
&lt;p&gt;As PyCon 2018 happened last week, I've been watching a few talks. It's
sometimes difficult to keep up with changes to technology if you're not
paying constant attention. These kinds of talks are a useful way of
trying to catch up a little. With that in mind, I'm writing up summaries
of a few talks here.&lt;/p&gt;
&lt;h2 id="solve-your-problem-with-sloppy-python"&gt;Solve your problem with sloppy Python&lt;/h2&gt;
&lt;p&gt;The talk is available to &lt;a href="https://www.youtube.com/watch?v=Jd8ulMb6_ls"&gt;watch
here&lt;/a&gt;, and an easy watch.
This was a pragmatic and enjoyable talk that would be easy for beginners
in Python to follow.&lt;/p&gt;
&lt;p&gt;It's a nice contrast from other programming talks too. Often,
presenters, quite reasonably, focus on telling or teaching an audience
what they believe to be best practice on a topic. Concentrating on a
more practical side made for a light and refreshing approach.&lt;/p&gt;
&lt;h3 id="code-being-discussed-is-for-personal-automation"&gt;Code being discussed is for personal automation&lt;/h3&gt;
&lt;p&gt;Writing code to solve your problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not writing code in a professional context.&lt;/li&gt;
&lt;li&gt;These are throwaway scripts.&lt;/li&gt;
&lt;li&gt;You're the only person writing it and likely to see it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="rules"&gt;Rules&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fail early and noisily.&lt;/li&gt;
&lt;li&gt;Use Python instead of shell scripts.&lt;/li&gt;
&lt;li&gt;Have fun!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="guidelines"&gt;Guidelines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Use latest Python version to take advantage of new features.&lt;/li&gt;
&lt;li&gt;Try automating even more, push as far as you can go, but may have some
  human intervention too.&lt;/li&gt;
&lt;li&gt;These projects are an excuse to try or learn new libraries/technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It doesn't matter if the code's hacky; you may not bother with tests.
Quick and dirty code to get a job done. A couple of examples of this
from the renaming files problem in the talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;ls&lt;/code&gt; to generate a list of filenames in Python; add triple
  quotes around string, &lt;code&gt;strip()&lt;/code&gt; and &lt;code&gt;split()&lt;/code&gt; on newlines gives a
  list.&lt;/li&gt;
&lt;li&gt;using exceptions lists in renaming files (e.g. to add apostrophes to
  words), run through each check for each filename. Most won't trigger,
  so you're doing lots of unnecessary checks, and could refine that, but
  performance unlikely to be an issue for these kinds of tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cutting corners is OK in this context, if it gets the job done.&lt;/p&gt;
&lt;h3 id="example-uses"&gt;Example uses&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Renaming files. A general tip for file renaming tasks — in this case,
  downloaded radio shows — back these up via creating hard links with
  the same filenames in a backup directory. That way you can always
  revert to the original names, without having to backup the files.
  Could use Python's &lt;code&gt;os.link()&lt;/code&gt; but also possible via a simple shell
  loop: &lt;code&gt;mkdir backup &amp;amp;&amp;amp; for a in * ; do ln $a backup/$a ; done&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Provisioning new machines, e.g. running &lt;code&gt;apt install&lt;/code&gt; and configuring
  programs, e.g. copying license keys.&lt;/li&gt;
&lt;li&gt;Tidying audio files, creating playlists etc.; possibly with human
  intervention here.&lt;/li&gt;
&lt;li&gt;Ripping CDs, using simple metadata format that can be parsed easily.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="a-final-note"&gt;A final note&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sometimes Python was used to call out to the shell. &lt;code&gt;subprocess.run(s,
  check=True, shell=True)&lt;/code&gt; is better than &lt;code&gt;os.system()&lt;/code&gt; because
  &lt;code&gt;os.system()&lt;/code&gt; does not fail noisily, but &lt;code&gt;subprocess.run()&lt;/code&gt; does.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="a-thought"&gt;A thought&lt;/h3&gt;
&lt;p&gt;One thing that didn't get asked in the Q&amp;amp;A at the end: how should you
estimate whether the automation is actually costing you time? xkcd
has covered this well in these &lt;a href="https://xkcd.com/1205/"&gt;two&lt;/a&gt;
&lt;a href="https://xkcd.com/1319/"&gt;comics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, it can be reasonably predicted that, if the process is
either time consuming or will be repeated often, it's worthwhile to
spend the time to write code as a solution to the problem.&lt;/p&gt;
&lt;p&gt;But, the "Rogue's Gallery" radio show renaming given as the main example
presumably took a few minutes to write, find the exceptions (by hand)
and verify (probably also by hand) the code is doing what it should.
There are only actually a few shows to rename, and these themselves
could be done by hand, as a one-off task.&lt;/p&gt;</content><category term="2018"></category><category term="PyCon"></category><category term="Python"></category></entry><entry><title>Upgrading Raspbian and rc.local failures</title><link href="https://www.stevenmaude.co.uk/posts/upgrading-raspbian-and-rclocal-failures" rel="alternate"></link><published>2017-12-10T20:13:00+00:00</published><updated>2017-12-10T20:13:00+00:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2017-12-10:/posts/upgrading-raspbian-and-rclocal-failures</id><summary type="html">&lt;p&gt;Using a Raspberry Pi as a wireless bridge, in-place upgrading Raspbian
and dealing with &lt;code&gt;rc.local&lt;/code&gt; not running tasks as planned.&lt;/p&gt;</summary><content type="html">&lt;h2 id="a-raspberry-pi-as-a-wireless-bridge-for-old-hardware"&gt;A Raspberry Pi as a wireless bridge for old hardware&lt;/h2&gt;
&lt;p&gt;This is something I did a couple of months back, but figure it's worth
documenting, to maybe help anyone with a similar problem search for it.&lt;/p&gt;
&lt;p&gt;One use for my Raspberry Pi is as a wireless bridge, and this is mainly
for a now ancient Xbox 360. Yes, the one without built-in wifi, it just
has an Ethernet port for networking; not much good when your router is
nowhere near a TV.&lt;/p&gt;
&lt;p&gt;Originally, and as is often customary when solving technology problems,
I used &lt;a href="https://unix.stackexchange.com/a/64353/32125"&gt;instructions that I cobbled
together&lt;/a&gt; from various
places.&lt;/p&gt;
&lt;p&gt;I'd been slack on upgrading my Raspberry Pi's Raspbian. It was working
perfectly fine for what it was doing, so there was no immediate need to
touch it. Because of this, it has languished on a distribution based on
the now aging Debian Wheezy.&lt;/p&gt;
&lt;p&gt;More recently, with the &lt;a href="https://www.ncsc.gov.uk/krack"&gt;recent WPA2
exploit&lt;/a&gt; in October, and the then lack of
any as-yet patch even for Debian Wheezy (which has since been patched,
not sure about Raspbian itself), I thought I should finally upgrade, so
the Pi was patched against this and any other future security issues.&lt;/p&gt;
&lt;p&gt;I didn't particularly want to go to the trouble of doing a fresh
install, so I tried an in-place operating system upgrade, deciding that
the worst that could happen is the upgrade fails and I'd have to do a
fresh install anyway.&lt;/p&gt;
&lt;h2 id="the-upgrade-process"&gt;The upgrade process&lt;/h2&gt;
&lt;p&gt;I actually upgraded in two stages. First from Wheezy to Jessie, and then
I figured if that went OK, I could try upgrading again, from Jessie to
Stretch too.&lt;/p&gt;
&lt;p&gt;Upgrading the distribution actually worked well. With my Raspbian Wheezy
install, I upgraded to Jessie as described on the &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=66&amp;amp;t=121880"&gt;Raspberry Pi
forum&lt;/a&gt;.
Everything seemed to work, including the Xbox's internet connection.&lt;/p&gt;
&lt;p&gt;Since I was feeling brave, I decided to upgrade again. However, I didn't
feel so brave that I would do that without first backing up the working
system, so I &lt;a href="https://raspberrypi.stackexchange.com/a/312/12370"&gt;backed up the SD card with
&lt;code&gt;dd&lt;/code&gt;&lt;/a&gt; to a gzipped
image in case something went wrong and I could recover a working system
quickly.&lt;/p&gt;
&lt;p&gt;Next, I upgraded from Jessie to Stretch. This is the same process as for
Wheezy to Jessie, just with &lt;a href="https://www.raspberrypi.org/blog/raspbian-stretch/"&gt;different repository sources
used&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once again, the upgrade worked fine, the Pi booted up, and I could
connect to it wirelessly.&lt;/p&gt;
&lt;h2 id="a-stretch-too-far"&gt;A stretch too far&lt;/h2&gt;
&lt;p&gt;But, the Xbox's internet connection no longer worked. Checking the Pi, I
spotted what looked like error messages appearing at boot time.&lt;/p&gt;
&lt;p&gt;The first problem is checking the boot log messages that quickly
disappear from the screen. Since Debian now uses systemd, you need &lt;code&gt;sudo
systemctl&lt;/code&gt; to review those messages.&lt;/p&gt;
&lt;p&gt;What I spotted there is that there was an error that indicated that
commands I had in &lt;code&gt;rc.local&lt;/code&gt; were not running correctly. As mentioned,
in my &lt;a href="https://unix.stackexchange.com/a/64353/32125"&gt;description of my Xbox and Pi
configuration&lt;/a&gt;, I was
using &lt;code&gt;rc.local&lt;/code&gt; to run the commands on boot that ensured the bridge
worked, instead of having to run anything by hand every boot.&lt;/p&gt;
&lt;p&gt;That seemed strange. More so when running the script by hand caused it
to work as normal, which allowed the Xbox to once again connect to the
internet as it did on Raspbian Jessie.&lt;/p&gt;
&lt;p&gt;Why did this script fail on boot via &lt;code&gt;rc.local&lt;/code&gt;? As &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=66&amp;amp;t=122207"&gt;mentioned on the
Raspberry Pi
forums&lt;/a&gt;,
the difference presumably is that the Pi's networking isn't configured
at the time of the script trying to run. Trying to then change this
configuration when it's not ready will then fail.&lt;/p&gt;
&lt;p&gt;So there are no guarantees about when &lt;code&gt;rc.local&lt;/code&gt; is run. If you have
dependencies on other things, the moral of this longish story is that
you should create a systemd service and have systemd launch it after
everything else; this fixed the problem and everything finally was
working again.&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;For reference, here's what I have configured:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wireless_bridge.sh&lt;/code&gt; is saved in &lt;code&gt;/usr/local/sbin&lt;/code&gt;, with 755 file
permissions, root as owner and group, and contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh -e&lt;/span&gt;
/usr/sbin/ifplugd eth0 --kill
/sbin/sysctl -w net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
/sbin/ifconfig eth0 &lt;span class="m"&gt;192&lt;/span&gt;.168.1.1
/sbin/iptables -t nat -A POSTROUTING -o wlan0 -s &lt;span class="m"&gt;192&lt;/span&gt;.168.1.0/24 -j MASQUERADE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;wireless-bridge.service&lt;/code&gt; is saved in &lt;code&gt;/etc/systemd/system&lt;/code&gt;, with 644
file permissions, root as owner and group, and contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Wireless Bridge Service&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;idle&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/sbin/wireless_bridge.sh&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could possibly change &lt;code&gt;multi-user.target&lt;/code&gt; to one of systemd's
&lt;a href="https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/"&gt;network
targets&lt;/a&gt;,
but I didn't bother testing this out, as the configuration above just
seemed to work (with, I suppose, the possible cost of the bridged
connection not being available until slightly later).&lt;/p&gt;
&lt;p&gt;I also have the Xbox network settings as:&lt;/p&gt;
&lt;p&gt;IP address: 192.168.1.2&lt;br&gt;
Subnet mask: 255.255.255.0&lt;br&gt;
Gateway: 192.168.1.1  &lt;/p&gt;
&lt;p&gt;and the primary DNS server set to my router's IP address.&lt;/p&gt;</content><category term="2017"></category><category term="Raspberry Pi"></category><category term="Raspbian"></category><category term="Linux"></category></entry><entry><title>A digital piano buyers' guide for learners</title><link href="https://www.stevenmaude.co.uk/posts/a-digital-piano-buyers-guide-for-learners" rel="alternate"></link><published>2017-10-22T17:10:00+01:00</published><updated>2017-10-22T17:10:00+01:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2017-10-22:/posts/a-digital-piano-buyers-guide-for-learners</id><summary type="html">&lt;p&gt;Why I chose a digital piano over an acoustic, what to look out
for when buying a digital piano, and the advantages of buying used.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I've &lt;a href="https://www.stevenmaude.co.uk/posts/do-you-even-liszt-five-months-of-learning-piano"&gt;documented earlier
here&lt;/a&gt;, I've been
taking piano lessons since the start of this year. There I also
mentioned I'd been using a keyboard to learn. Since then, I've switched
to a second-hand digital piano for practising.&lt;/p&gt;
&lt;p&gt;So why?&lt;/p&gt;
&lt;p&gt;What I discovered is that a keyboard with velocity sensitive keys (i.e.
capable of producing different key volumes depending on how you play) is
fine when starting out. Any music you play at first will be simple, but
needing to play notes at varying volumes is likely something you'll be
doing almost from the start.&lt;/p&gt;
&lt;p&gt;If you're planning on trying out piano lessons, if you have such a
keyboard already or can borrow one for a few months, that's a sensible
initial step.  Don't let not having a piano right now put you off
starting learning now: it's a substantial commitment to get one. It's
probably sensible to ensure that you're likely to stick with learning
first, before plunging in.&lt;/p&gt;
&lt;p&gt;But, a few months on, once you've made a little progress, the
inadequacies of using a keyboard as a substitute for a piano soon become
apparent.&lt;/p&gt;
&lt;p&gt;One big problem is that the feel of hitting the keys is much different,
which is difficult to get used to when playing on a real grand piano for
lessons. &lt;/p&gt;
&lt;p&gt;Another is that, like the keyboard I used, many keyboards only have 61
keys, not the 88 that standard pianos have. This can be confusing, and
can hamper you relatively early on. Even on the simple pieces I was
learning, there were occasional cases where you'd just have to miss or
mime playing a note out, because it didn't exist on the keyboard. The
difference in the number of keys also made orienting myself difficult
when sat at the real piano for lessons, and I'd get "surprised" by the
presence of the extra keys.&lt;/p&gt;
&lt;p&gt;At that point, it felt like that the keyboard was hindering my progress,
and a natural juncture to replace it in my practice.&lt;/p&gt;
&lt;h2 id="why-a-digital-piano"&gt;Why a digital piano?&lt;/h2&gt;
&lt;p&gt;If you're not too aware of digital pianos, and I wasn't before I started
looking into this, &lt;a href="https://en.wikipedia.org/wiki/Digital_piano"&gt;Wikipedia is a good starting
point&lt;/a&gt;. There, we learn,
digital pianos are really high-end keyboards that are designed to be
good facsimiles of real pianos, in both sound and feel of how it plays.
(I'd add that sometimes, though not always, they are designed to mimic
the look of a real piano too.)&lt;/p&gt;
&lt;p&gt;That explains why you might want a digital piano over a keyboard. But
why not just get a traditional acoustic piano? Especially when looking
around, you can likely find pianos on offer for the literal giveaway
price of £0, providing you can collect. Reading on, the Wikipedia entry
explains good reasons for this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Acoustic pianos weigh a &lt;em&gt;lot&lt;/em&gt;. It's a considerable task to get one of
  these to where you live, especially without damage to the instrument.
  Likewise, if you need to move for whatever reason, you face this
  problem again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Likewise, acoustic pianos can take up a lot of room. Some digital
  pianos can do too (you can even get digital grand pianos, for reasons
  that aren't that clear to me), but there are digital pianos available
  that are just the keyboard, and are relatively easy to move. For
  example, Yamaha's current low end keyboard-like models weigh a little
  bit more than 10 kg.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acoustic pianos will also need tuning. That's an ongoing cost and one
  that's also fairly pricey. Digital pianos could also require repair
  too, although not likely with the regular frequency that an acoustic
  would need tuning (pardon the pun).&lt;/p&gt;
&lt;p&gt;One downside with digital pianos is that you're somewhat reliant on
having local availability of technicians who specialise on those
models, and the parts being available to repair the piano; reasons
why you might want to opt for a well-known brand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Almost all (or maybe even all) modern digital pianos, and even lots of
  older ones, will have some means to use it as a MIDI keyboard. A
  digital piano in a given price range likely has fewer voices (i.e.
  types of sound it can play, e.g. piano, organ, strings) than a
  comparably priced keyboard, but you can always hook it up to a
  computer and use it to control whatever instruments you have available
  there in a digital audio workstation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digital pianos have headphone outputs, so that you can practice
  quietly. This is not usually an option on acoustic pianos. I say
  usually, because you can get hybrid acoustic-digital pianos that allow
  switching between acoustic and digital modes, though these are very
  expensive and still suffer from the problems of tuning, size and
  weight.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hybrids aside, the downsides with digital pianos are that the feel and
sound is a simulation of a real piano. Even with today's technology,
they're never going to be quite as authentic as the real thing. But
especially when still a beginner, a decent digital piano is probably
more than sufficient.&lt;/p&gt;
&lt;h2 id="what-to-look-for"&gt;What to look for&lt;/h2&gt;
&lt;p&gt;It's daunting spending a considerable amount on a piano, if you still
feel like you don't know what makes for a good instrument. From reading
around, there are some general considerations you can think about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;size and cabinet; as I mentioned above, digital pianos come in
  different sizes. If you're pushed for space, then you might have to go
  for one of the keyboard-like pianos. There are also cosmetic choices
  to make; if a piano comes built-in to a cabinet, do you like the
  appearance and colour of it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pedals; acoustic pianos usually have three pedals. I think most
  electric pianos usually have three too, though lower end models might
  only have two. Three, then, really is &lt;a href="https://www.youtube.com/watch?v=YZoYEr6NdmE"&gt;the magic
  number&lt;/a&gt;, so you may want
  to go for a model with the pedals you'd expect on a acoustic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;voices; this is maybe less important. The main thing for learning here
  is that the piano sounds realistic. Having other sounds to use is a
  nice bonus, but not essential.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;polyphony; this is the number of notes that can &lt;em&gt;sound&lt;/em&gt; simultaneously
  without earlier played notes that are still sounding just being
  dropped. Current low end models may have 64 note polyphony, whereas
  better models will have 128, 192 or even more.&lt;/p&gt;
&lt;p&gt;It's not quite as simple as the number of notes you &lt;em&gt;play&lt;/em&gt;
simultaneously, since, for example, using multiple voices (e.g.
piano and strings) at once, or using the sustain pedal to prolong
the sound of non-held notes will eat into this note "budget". More
is better, especially if using multiple voices simultaneously. But
given that 64 note polyphony seemed to be a satisfactory standard in
the past, anything above that is likely very good for a beginner
piano.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;headphone noise; after I had an experience with a keyboard's headphone
  output being &lt;a href="https://www.stevenmaude.co.uk/posts/the-buzz-and-hum-of-learning-a-new-instrument"&gt;distractingly
  noisy&lt;/a&gt;,
  I knew I should check this on any piano I bought.  Just remember to
  take the pair of headphones you use with you when looking at a piano
  to test this. Trying to concentrate with a distracting buzz in your
  ears isn't a great feature to have.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the feel and action of the keyboard; I can appreciate that higher end
  pianos aim to more realistically replicate the feel of a real piano.
  For instance, the weights of the keys, and the texture. And if you've
  experience of several pianos, this is probably easy to discern. For
  me, having played on one acoustic piano, this was far less easy for me
  to know what was good and bad. More expensive digital pianos tend to
  use different hardware than cheaper variants, whether you can tell
  much of a difference as a beginner is difficult for me to know.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;branding; common brands are those you might expect, the likes of
  Roland, Korg and Yamaha. There are also no-name branded pianos
  available, but I suspect the quality of these can vary wildly. I'm not
  always one to go for big name brands, but I think in cases like this,
  where there's likely much expertise gone into the research and
  development, it's probably easy to cut corners and end up that might
  look the part, but is in fact considerably inferior.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="and-with-used-pianos"&gt;And with used pianos?&lt;/h3&gt;
&lt;p&gt;My teacher's advice was to stick to a low budget and pick up a used
model (given that it would be almost certainly an improvement on the
keyboard I was using), rather than a brand new, but low end model. When
I was looking at the market, digital pianos seemed relatively mature.
The manufacturers continue to churn out regular updates to their product
lines, but, much like mobile phones now, it doesn't seem that there are
any real technological revolutions that have happened over the past
couple of years. Buying used seems like a good way to get more for your
money.&lt;/p&gt;
&lt;p&gt;When buying used, the condition of the instrument is important. Spares
may be few and far between and expensive if anything does break. That's
another reason not to maybe spend a huge amount on old kit: the repair
costs may also be very expensive or repair may rely on you getting hold
of a second broken model for spares. (This also is another reason why
no-name digital pianos may not be a good investment, if there are no
parts available or indeed anyone who knows how to repair those models.)&lt;/p&gt;
&lt;p&gt;Bearing all that in mind, the most I wanted to spend was the cost of the
current low end Casio and Yamaha electric pianos, and I didn't really
want something more than about a decade old.&lt;/p&gt;
&lt;h2 id="buying-a-used-piano"&gt;Buying a used piano&lt;/h2&gt;
&lt;p&gt;In the end, after a week or two of searching on eBay and Gumtree — if
you're in the US, Craigslist is probably a good substitute for Gumtree —
I managed to find a Yamaha Clavinova that seemed ideal. It was within
driving distance to collect, seemed reasonably priced, was in my budget,
and claimed to be in good condition.&lt;/p&gt;
&lt;p&gt;When looking around, I found that used digital pianos were generally
claimed to be well cared for. My hunch is this is because these are
reasonably expensive bits of kit new and therefore buyers want to look
after them. Another reason is that a lot of sellers are getting rid of
them because the piano is no longer in use, either because they have
bought a newer instrument or have given up learning. Not in use means
not becoming worn.&lt;/p&gt;
&lt;p&gt;This was much the case for the piano I ended up buying. The seller never
really took to it, was looking to replace it with a synthesizer and so
it looked almost brand new. There was plastic wrapping still on the
pedals, hardly a visible scratch on the cabinet, all the manuals were
present, and even a catalogue of various Clavinova models that the
original purchaser had been given while they were originally deciding
which one to buy. All a good portent for the piano being treated well.&lt;/p&gt;
&lt;h3 id="some-other-tips-on-buying-used"&gt;Some other tips on buying used&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure you try as much as possible before handing over cash. Do all
  of the buttons work? Does every key plays smoothly? As mentioned
  above, I took my own headphones to test the headphone output too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't be afraid to haggle a little. Prices of pianos vary a lot as
  there are lots of different models and often relatively few sellers
  around (although major cities will tend to have more). Unless someone
  has expressly stated the asking price is the final price, even if the
  asking price is reasonably sensible, I don't think there's any harm in
  offering something like 10-15% below to give them room to
  counter-offer, and maybe give you a small discount. Since pianos are
  big, and sellers may well want to get rid of them quickly, if they
  sense a possible sale, they may well be happy to negotiate a little.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure you're clear on what's included for the price. Sometimes
  sellers will sell piano stools or stands separately from the piano
  itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Going to a manufacturer's website and getting hold of a PDF copy of the
  manual, if available, is a good way of answering questions you may
  have prior to purchase (e.g. is the MIDI via USB? does the piano need
  drivers for connecting to a PC? are they available?) or finding
  detailed specifications. You can usually find these in the support
  section of a manufacturer's site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, if you're intending to ever use your piano as a MIDI
  keyboard, make sure that drivers are available for the piano for your
  operating system from the manufacturer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't be too set on going for a particular model or brand. The market
  depends on what's available in your area, so I'd just stick with a
  budget and features you're not willing to compromise on. Most sellers
  want you to arrange collection, which likely means you travelling
  there to collect in person (unless you pay someone to move it, which
  will probably cost you a fair bit).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="three-months-on"&gt;Three months on&lt;/h2&gt;
&lt;p&gt;In the end, I went with the first Clavinova I looked at, and have been
very happy with it since. While a little unusual to switch from the
previous keyboard initially, it didn't take that long to adjust. Since
then, it has made a noticeable difference in my confidence going into
piano lessons and being sat at an acoustic grand piano. It now feels
much more a natural transition to go from playing at home to playing in
lessons.&lt;/p&gt;</content><category term="2017"></category><category term="music"></category><category term="piano"></category></entry><entry><title>Full of heart: an Undertale review</title><link href="https://www.stevenmaude.co.uk/posts/full-of-heart-an-undertale-review" rel="alternate"></link><published>2017-08-20T15:47:00+01:00</published><updated>2017-08-20T15:47:00+01:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2017-08-20:/posts/full-of-heart-an-undertale-review</id><summary type="html">&lt;p&gt;The world doesn't need another review of Undertale.
Regardless, here's why I think you should play it.&lt;/p&gt;</summary><content type="html">&lt;h2 id="playing-undertale-fills-you-with-determination"&gt;Playing Undertale fills you with determination&lt;/h2&gt;
&lt;p&gt;Undertale's almost two years old. Yet I only bothered to play it this
year. If you have a PS4 and never got it on PC, it was released this
week. While the PC version will have been much cheaper while on sale,
and runs on just about any hardware, if you really must play it on a
console, now you can.&lt;/p&gt;
&lt;p&gt;Why didn't I bother sooner? Hype is one reason. When it's that vocal —
and with Undertale, it's near deafening — I always tend to do as &lt;a href="https://en.wikipedia.org/wiki/Don%27t_Believe_the_Hype"&gt;Public
Enemy
instructed&lt;/a&gt;.
The other is its resemblance to 16-bit Japanese RPGs (JRPGs). While I
appreciate those games are much loved, I've never really shared that
affection.&lt;/p&gt;
&lt;p&gt;When I did actually get round to Undertale on PC, it happened to be on
sale. I figured it was cheap enough to see if they hype was warranted
and I wanted an escapist diversion from real world events. It seemed as
good a game to try out.&lt;/p&gt;
&lt;p&gt;Without spoiling too much, you're a human that finds yourself fallen
down a mountain, and lost somewhere in the underground world of
monsters. The rest of the game sees you journeying through to try and
find some route home. Mostly this is done by exploration, although there
are a few puzzles dotted along the way that need solving before you can
progress, and monsters that you can fight. So much, so familiar.&lt;/p&gt;
&lt;p&gt;But it's a wonderful game.&lt;/p&gt;
&lt;p&gt;Those aspects of JRPGs that I never got on with are kept to a minimum.
There's a minimum of backtracking. The random battles, a staple of that
genre, that prevent you from walking more than a couple of footsteps —
because &lt;em&gt;swoosh swoosh swoosh&lt;/em&gt; TWO SLIGHTLY SURLY ENEMIES IN MATCHING
OUTFITS APPEAR, and &lt;em&gt;cue battle music&lt;/em&gt; — are thankfully omitted too.&lt;/p&gt;
&lt;p&gt;When you actually battle, the system is novel: a mixture of strategy and
shmup bullet dodging. Battles can even be avoided, and these options are
left open to the player to decide. Both in and out of battle mode, the
dialogue is predominantly witty and charming, and avoiding lazy
territory, instead of prolonged and awkwardly translated.&lt;/p&gt;
&lt;p&gt;Another thing that the game does well is, without any spoilers, is
continually confronting you and challenging your expectations of the
situations you're placed in, at times akin to what something like The
Stanley Parable does in trying to break the fourth wall.&lt;/p&gt;
&lt;p&gt;Without playing and without spoiling it, it's hard to convey that
without being anything other than handwavingly effusive. Characters and
combatants that only appear briefly don't just feel like they've been
arbitrarily placed there, but like they have a real back story, even if
that's not ever entirely revealed. And while the game has this rich
assortment of characters, it also has character itself, full of soul and
heart.&lt;/p&gt;
&lt;h2 id="fantastic-mr-fox"&gt;Fantastic Mr. Fox&lt;/h2&gt;
&lt;p&gt;Undertale's singular cohesion is likely because it was largely the
product of one person's imagination, Toby Fox. And while its graphics
are simple, but functional, it is a polished game, backed by an
incredibly &lt;a href="https://www.youtube.com/watch?v=SxNcKXjfaQo"&gt;strong
soundtrack&lt;/a&gt; also composed
by the developer.&lt;/p&gt;
&lt;p&gt;I've been fairly lucky that the few games that I've played through in
recent years have been particularly good choices for one reason or
another. Undertale's another, and one of the more memorable. It
genuinely feels like an experience that would only work as a game, not a
book or film. True, you could describe a similar journey with similar
characters in print or on screen. But it's the act of playing through
and having to make decisions on how you play through that's intrinsic to
how it works and how it makes you feel; that's very different to a more
passive experience.&lt;/p&gt;
&lt;p&gt;Where many otherwise good games fail is extending their gameplay through
repetition and tedium, churning out more of the same. Undertale avoids
this, keeping the core game short and sweet, but giving you the
opportunity to play through in a very different play style. I'll
definitely look forward to revisiting that world in a few months.
(That's a really strong compliment from me. I have so little time to
play games these days that there are very few that I'd ever return to
once I've played through.)&lt;/p&gt;
&lt;p&gt;Undertale is the perfect game for a Sunday afternoon where rain is
beating down your windows, a dull Tuesday where you're miserably plagued
with cold, or maybe even a snowy Thursday where you have the luxury of
being snowed in, unable to get to school or work, and are just warming
up with hot chocolate after already having been out to play in the snow.&lt;/p&gt;
&lt;p&gt;It's that kind of game.&lt;/p&gt;</content><category term="2017"></category><category term="game"></category><category term="review"></category></entry><entry><title>Flipping out over swimming turns</title><link href="https://www.stevenmaude.co.uk/posts/flipping-out-over-swimming-turns" rel="alternate"></link><published>2017-07-29T12:18:00+01:00</published><updated>2017-07-29T12:18:00+01:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2017-07-29:/posts/flipping-out-over-swimming-turns</id><summary type="html">&lt;p&gt;Some tips on how to learn to tumble (or flip) turn.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Note that I actually learned how to flip (or tumble) turn a while ago,
drafted this back then and only just got round to posting it.&lt;/p&gt;
&lt;h2 id="turn-down-for-what"&gt;Turn down for what?&lt;/h2&gt;
&lt;p&gt;I have been swimming for probably the best part of twenty years. That is
&lt;em&gt;regularly&lt;/em&gt; over a period of twenty years, not constantly; an hour
usually is enough.&lt;/p&gt;
&lt;p&gt;Because I didn't gain confidence in the water until much later than I
should have done, I've never had anything much in the way of serious
coaching. I've swum for fitness and, apart from swimming lessons for the
absolute basics, have made pretty much any improvements to my swimming
by myself.&lt;/p&gt;
&lt;p&gt;Though swimming feels quite natural to me now, this lack of training and
racing means I never had any real incentive to learn how to properly
tumble turn. It always looked really daunting when I saw others doing
them. But I more recently thought that I wanted to have a go at learning
them, and eventually got there. My turns are far from perfect, but the
fact that I have the co-ordination to flip myself over is impressive
enough to me, to be honest.&lt;/p&gt;
&lt;p&gt;What's particularly nice is that flip turns are a more fluid way of
turning, than grabbing the side with your hands and pushing off. It
means you can maintain more speed, and just feels smoother.&lt;/p&gt;
&lt;p&gt;Bear in mind, I'm hardly a good swimmer. And I'm definitely not a
swimming coach either. But, since I taught myself and can remember it
reasonably well, I thought it was worth documenting how I learned. It
took me a while to figure all this out myself. It's the learning
experience of someone who taught themselves very recently as an adult,
rather than coaches who have a lot more knowledge and experience than
me, but may have less of a memory of how they first learned the skill.&lt;/p&gt;
&lt;h2 id="turning"&gt;Turning&lt;/h2&gt;
&lt;p&gt;There are lots of videos, such as &lt;a href="https://www.youtube.com/watch?v=FDM-WuklAqc"&gt;this
tutorial&lt;/a&gt; but, when I was
learning, I found that videos tended to go over the mechanics of the
turn itself, not so much how you go about learning.&lt;/p&gt;
&lt;p&gt;If you watch that video, you'll see that for a front crawl flip turn,
all that's really involved is something like a forward roll, albeit in
the water. As you approach the wall, you flip yourself over forwards,
push off the wall with your feet and swim off in the other direction.
Notice that if you just roll over forwards, your body will flip from
face down to face up. So you also have to rotate yourself back to face
down as you push off from the wall. And ideally all this is in a smooth
motion. Simple, eh?&lt;/p&gt;
&lt;p&gt;Like many things, once you grasp it, it's easy. But it's difficult to
pick up at first. You're coordinating your body in a way which you may
not have before, along with thinking about keeping on swimming,
breathing and without injuring yourself. Putting all that together is
surprisingly difficult.&lt;/p&gt;
&lt;h2 id="what-do-you-have-to-worry-about"&gt;What do you have to worry about?&lt;/h2&gt;
&lt;h3 id="hitting-the-wall"&gt;Hitting the wall&lt;/h3&gt;
&lt;p&gt;Fortunately, this hasn't happened to me yet, not even while learning,
but misjudging your position may lead to unexpected bumps. And the worry
of doing that is an impediment to learning, because you may be
overcautious and hold back too much.&lt;/p&gt;
&lt;p&gt;In fact, you can actually get quite close, probably about an arm's
length without too much worry. The best way I found to build confidence
is to try from too far out and then progressively get closer to decide
the right distance to turn without colliding.&lt;/p&gt;
&lt;p&gt;Often, pools have markers on the floor for swimmers to judge the
distance. If yours doesn't then just find your own marker. Maybe that's
by counting tiles from the side or just by remembering how far in front
you need to be at the point where you should turn. You may not need
these guides once when you're more comfortable with how many strokes you
are from turning, or when your instincts improve.&lt;/p&gt;
&lt;p&gt;There's a bit of fine tuning with the ideal distance: if you're too
close, you may end up hitting some part of your body against the wall or
at least take measures to awkwardly prevent yourself from colliding.
While if you're too far, you'll either miss the wall completely, or have
to stretch your legs out to reach the wall and get a weak push off as
your legs can't spring you off the wall.&lt;/p&gt;
&lt;p&gt;A counterintuitive thing that helped me was sometimes trying this with
breaststroke, &lt;em&gt;not frontcrawl&lt;/em&gt;.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; This means you're approaching more
slowly, so less worried about hitting the wall. It's also easier to keep
the wall in sight, instead of while you're rotating in frontcrawl.
Related to this, I incorrectly assumed that you need to be going fast to
keep your momentum moving through the turn. Even going slowly, you can
still flip over without too much trouble.&lt;/p&gt;
&lt;h3 id="rolling"&gt;Rolling&lt;/h3&gt;
&lt;p&gt;Some of the video guides I watched on YouTube also seemed to suggest
flipping yourself over in the water, not even being near the wall, just
from standing.&lt;/p&gt;
&lt;p&gt;This also stops any possibility of your forehead becoming closely
acquainted with the swimming pool wall, but I actually found this quite
difficult when I was learning to turn (though easier now I can actually
turn). This is also useful since you can actually use the same motion to
flip direction even without a wall which can be handy if you're in a
busy lane and want to avoid overtaking a cluster of slower swimmers in
front.&lt;/p&gt;
&lt;p&gt;The most useful exercise for me was doing forward rolls. If you haven't
done forward rolls in a while (and why would you?), doing a few of those
on dry land as practice helped me get the idea of the required motion.&lt;/p&gt;
&lt;h3 id="breathing"&gt;Breathing&lt;/h3&gt;
&lt;p&gt;Having water rushing up your nose is not a pleasant feeling that's not
dissimilar to spraying carbonated drinks up there. (It always reminds me
of &lt;a href="https://en.wikipedia.org/wiki/Irn-Bru"&gt;Irn-Bru&lt;/a&gt;; that drink seemed
to be notorious for sending jets of eye-watering bubbles up my nose.)&lt;/p&gt;
&lt;p&gt;At first, it's irritating and distracting, and unfortunately may well
happen almost every time you attempt to do a flip turn. Breathing out
through your nose slightly while flipping stops this, but knowing
exactly when you start needing to breathe out takes some practice,
especially when you're possibly slightly disorientated from flipping. At
the same time, you don't want to breathe out unnecessarily and leave
yourself gasping for breath.&lt;/p&gt;
&lt;p&gt;Initially, you probably overcompensate and breathe out too much. All
that's need is a gentle and brief air flow while you're turning,
possibly far less than you imagine.&lt;/p&gt;
&lt;p&gt;(When I first drafted this post, even after a good few months of turning
like this, I was still occasionally getting caught out, and it takes a
few seconds to have the awkward fizzy feeling dissipate. A considerable
time later, this isn't the case now; it's relatively rare that I get the
breathing wrong.)&lt;/p&gt;
&lt;h2 id="practice"&gt;Practice&lt;/h2&gt;
&lt;p&gt;Practice isn't anything unique to this, but it's probably the most
important thing. You're learning several new physical skills and having
to employ them all seamlessly to get the result you want.&lt;/p&gt;
&lt;p&gt;I think I spent a few minutes of several swim sessions over several
weeks to start getting a feel for turning. This was a little
demoralising at times, especially as failing means you're often getting
nowhere, metaphorically and literally (I'd often end up stuck at the
side of the pool, bursting up for air, to get the water out of my nose.)
What you have to remember is that getting things horribly wrong is a key
part of learning physical skills. Eventually, you condition yourself to
not do the Wrong Things, and you slowly improve.&lt;/p&gt;
&lt;p&gt;Slowly, the motion that was needed to get myself round started to become
apparent. After that, I spent a couple of sessions where I was focusing
pretty much exclusively working on this only, swimming from end to end,
but not particularly exercising hard and just concentrating on the turns
themselves. Even then, I kept getting worried that I'd forget what I'd
learned, so I ensured that I attempted to turn on just about every
length I was swimming for a while after that.&lt;/p&gt;
&lt;p&gt;It can be frustrating at first, but when it does click, then you'll be
able to turn every time you want to, rather than making a mess of it.
After that, you can spend a lot more time refining aspects of it,
optimising where you start turning from, trying to push off to get the
most distance from the wall, and timing your breathing so you can stay
underwater without it being uncomfortable.&lt;/p&gt;
&lt;p&gt;Despite me finding it tricky to learn, I'd say it's well worth the
effort, even if you're swimming just for fitness. Tumble turns give you
another way of mixing up your training, can help constant lengths flow
together more seamlessly, and aid you maintaining your speed when
swimming in shorter length pools. If you need any more convincing, just
compare flip turning swimmers to those not when you're at the pool;
you'll see it makes for a considerable drop in lap times once you get it
right.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;If you're racing breaststroke, then you don't actually flip turn,
  but touch the wall with both hands, and then push back off the
  wall with your feet, but using breaststroke is still a nice way
  to learn.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="2017"></category><category term="swimming"></category></entry><entry><title>Rinse FM's SoundCloud account takedown</title><link href="https://www.stevenmaude.co.uk/posts/rinse-fms-soundcloud-account-takedown" rel="alternate"></link><published>2017-07-15T23:11:00+01:00</published><updated>2017-07-18T21:56:00+01:00</updated><author><name>Steven Maude</name></author><id>tag:www.stevenmaude.co.uk,2017-07-15:/posts/rinse-fms-soundcloud-account-takedown</id><summary type="html">&lt;p&gt;What the deletion of Rinse FM's SoundCloud account for
copyright infringement tells us both about music industry
short-sightedness and hosting creative projects online.&lt;/p&gt;</summary><content type="html">&lt;div class="admonition article-edit"&gt;
&lt;p&gt;Edit 2017-07-18: SoundCloud have now restored &lt;a href="https://twitter.com/geeneus/status/887050524067061760"&gt;Rinse FM's
account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nonetheless, the points below still stand in relation to hosting
content under online accounts that have the potential for
copyright takedowns.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="and-its-shutdown"&gt;And it's shutdown&lt;/h2&gt;
&lt;p&gt;For many dance music lovers, the taking down of Rinse FM's SoundCloud
profile yesterday was a sad event. Along with their account, a huge
archive of shows they hosted on SoundCloud have all gone due to
&lt;a href="https://twitter.com/geeneus/status/885984092449366021"&gt;copyright
infringement&lt;/a&gt;
complaints.&lt;/p&gt;
&lt;p&gt;It's difficult to overstate Rinse's influence in dance music. The
station was heavily instrumental in pushing grime, and later dubstep in
the UK, and contributing to the massive spread of these genres outside
of these shores. While much of the UK radio broadcast frequency space is
pumped full of the same cloying pop music being endlessly
recirculated,&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; Rinse FM is a refreshing breath of fresh air.&lt;/p&gt;
&lt;p&gt;Rinse FM started life as a pirate station, &lt;a href="https://www.theguardian.com/media/2012/sep/30/rinse-fm-former-pirate-station-18-birthday"&gt;broadcasting illicitly via
aerials perched on tower block
rooftops&lt;/a&gt;,
but more recently acquired a legal license. Peculiar then that they are
now legitimate under the traditional broadcasting regulations, but don't
have the same freedoms when distributing those same broadcasts via the
internet.&lt;/p&gt;
&lt;p&gt;Fortunately Rinse has an established physical presence as an FM station
and a fanbase built long before the internet became popular for
distributing music. Rinse also has a sizable following on other social
networks, allowing them to communicate what's going on, and, probably as
important, a web site that lets them continue to put out their shows
uninterrupted, via live streaming and podcasts.&lt;/p&gt;
&lt;p&gt;Without seeing their SoundCloud playback statistics or their web
analytics before and after this change, it's difficult to know how much
of an impact that has on the number of people listening to Rinse FM
online. But, given the news of SoundCloud's redundancies this week, it
may well be that &lt;em&gt;everyone's&lt;/em&gt; profiles are &lt;a href="https://techcrunch.com/2017/07/12/soundshroud/"&gt;getting deleted from
SoundCloud sometime
soon&lt;/a&gt; like it or not.
Perhaps any impact on Rinse's future prospects may well be minimal.&lt;/p&gt;
&lt;p&gt;But, such an account deletion could be disastrous for the progress of a
smaller project, say a independent producer, or a niche podcast, who are
maybe start to make waves. All of a sudden their content evaporates
(easy to replace somewhere else) together with all of their following on
that site (perhaps more difficult to rebuild).&lt;/p&gt;
&lt;h2 id="what-can-we-take-away-from-this-takedown"&gt;What can we take away from this takedown?&lt;/h2&gt;
&lt;h3 id="it-seems-a-backwards-step-for-the-music-industry"&gt;It seems a backwards step for the music industry&lt;/h3&gt;
&lt;p&gt;Take a look at &lt;a href="http://rinse.fm/podcasts/"&gt;the podcast&lt;/a&gt; page and, in any
given week, you'll see a diverse range of artists hosting shows, and
invariably a top line up. Today, you have a house legend, Masters At
Work's Kenny Dope, on only a couple of hours after alternative
electronic producer, &lt;a href="https://forestswords.bandcamp.com/"&gt;Forest
Swords&lt;/a&gt;. Whether old hands or not,
the hosts are often influential taste makers.&lt;/p&gt;
&lt;p&gt;Because of that, Rinse's audience no doubt overlaps with who the music
industry are targeting: young and early adopters of new music. Why then
does someone, somewhere presumably think it's a smart move to hinder
that?  These listeners likely form the dedicated audience that same
industry is crying out for: those that will go out and track down music,
share it with their friends, go to shows to see acts playing out, or
even become the next big DJs or producers of the future.&lt;/p&gt;
&lt;p&gt;Here's another thing: many of Rinse's shows are in a mix format. That's
because mixes are a natural way of presenting modern dance music. Maybe
I'm naive as to the machinations of the music industry, but both as a
listener, and as a (mediocre) DJ, it's difficult to see the logic behind
&lt;a href="http://djtechtools.com/2017/06/15/drake-hate-dj-mixes-soundcloud-copyright-strikes-vs-dj-mixes/"&gt;taking down DJ mixes at
all&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As well as creative expression and entertainment in their own right,
mixes can act as promotional tools. The featuring of tracks in mixes may
well encourage listeners to buy the tracks, or at least to head over to
a streaming service to hear it uninterrupted. Keep in mind that a track
in a mix isn't usually a substitute for hearing the track end-to-end:
they're different contexts. And DJs listening in may well decide to
shell out for the full track to play in their own sets. When there's so
much music, past and present competing for attention today, you'd think
that &lt;em&gt;anything&lt;/em&gt; that might nudge listeners to a given label's artists
would be welcome.&lt;/p&gt;
&lt;h3 id="where-to-host-projects"&gt;Where to host projects?&lt;/h3&gt;
&lt;p&gt;So if you're starting with a project that you're serious about and you
want it to reach the audience you're aiming for, what do you do? What
this situation tells me is that it's vital to be cultivating a following
in multiple places. That way you're not back to square one should your
profile on a single site be taken down.&lt;/p&gt;
&lt;p&gt;Right now, I have an idea for a music-related project I'm intending to
put together. To keep things simple starting out, I'd considered just
having the project exist as a SoundCloud account, instead of creating a
blog to go with it. After this week with the Rinse FM takedown, coupled
with the possibility of SoundCloud disappearing, my thinking has shifted
entirely.&lt;/p&gt;
&lt;p&gt;Owners of accounts on online services, as I've written before,&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; have
little real ownership of what happens with those accounts. If the site's
owners or moderators don't like what you're doing for whatever reason,
you're gone. Someone might complain about what you're doing on the
service, just as happened to Rinse FM, and likewise you're gone. For
what I'm planning, it's very unlikely that copyright claims would be an
issue, but the potential of having your account taken down for some
other reason, and perhaps outside your control, still stands. &lt;/p&gt;
&lt;p&gt;Certainly, radio stations like Rinse and DJs could try their luck on
Mixcloud or other alternative sites, but there's nothing to say that the
same copyright issues might occur there in future, even if those sites
are relatively permissive now.&lt;/p&gt;
&lt;p&gt;It's difficult. The big services are those where the users are. Creators
are often tied to publishing using those services if they want to get
people interested, as those services are where people are browsing,
searching and listening. But, over-reliance on a particular service
means that if it fails you, either destroying your account on a whim, or
because the site itself is shutdown, the knock-on impact for getting
visibility (or audibility) for creative projects can be a big blow.
Hedging your bets seems the only viable solution.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Don't get me wrong. I'm very much not against pop music. The
  "same" in that sentence is an important qualifier of why I
  dislike those stations so, so much. It's the lack of individuality
  and the repetition that gets me. If you flick through the
  commercial pop stations, could you tell them apart?&lt;/p&gt;
&lt;p&gt;When there's so much music that I know I'll never have enough time
  to discover and hear, it's such a pity that show producers and
  station bosses are often so unadventurous.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Look &lt;a href="https://www.stevenmaude.co.uk/posts/what-happens-when-github-decides-youre-not-a-human"&gt;what happened to my GitHub account last year&lt;/a&gt;,
  for example.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="2017"></category><category term="music"></category><category term="radio"></category><category term="Rinse FM"></category><category term="SoundCloud"></category></entry></feed>